{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_fontcase plugin.\n *\n * @module      tiny_fontcase/commands\n * @copyright   2024 Your Name <you@example.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getButtonImage} from 'editor_tiny/utils';\nimport {get_string as getString} from 'core/str';\nimport {\n    component,\n    uppercaseButtonName,\n    lowercaseButtonName,\n    changecaseMenuItemName,\n    icon,\n} from './common';\n\nimport {getShowOnToolbar} from './options';\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n * @param {string} toCase Change font case to.\n */\nconst changeCase = (editor, toCase) => {\n    // TODO: This would change the case of the html tags as well.\n    // But the TinyMCE editor should correct that automatically.\n    let selectedText = editor.selection.getContent();\n\n    switch (toCase) {\n        case 'uppercase':\n            selectedText = selectedText.toUpperCase();\n            editor.selection.setContent(selectedText);\n        break;\n        case 'lowercase':\n            selectedText = selectedText.toLowerCase();\n            editor.selection.setContent(selectedText);\n        break;\n    }\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async() => {\n    const [\n        changecaseMenuItemNameTitle,\n        uppercaseTitle,\n        lowercaseTitle,\n        buttonImage,\n        uppercaseImage,\n        lowercaseImage,\n    ] = await Promise.all([\n        getString('menuitem_changecase', component),\n        getString('uppercase', component),\n        getString('lowercase', component),\n        getButtonImage('icon', component),\n        getButtonImage('uppercase', component),\n        getButtonImage('lowercase', component),\n    ]);\n\n    return (editor) => {\n        // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n        editor.ui.registry.addIcon(icon, buttonImage.html);\n\n        if (getShowOnToolbar(editor)) {\n            editor.ui.registry.addIcon('lowercaseIcon', lowercaseImage.html);\n            editor.ui.registry.addIcon('uppercaseIcon', uppercaseImage.html);\n\n            // Register the lowercase Toolbar Button.\n            editor.ui.registry.addButton(lowercaseButtonName, {\n                icon: 'lowercaseIcon',\n                tooltip: lowercaseTitle,\n                onAction: () => changeCase(editor, 'lowercase'),\n            });\n\n            // Register the uppercase Toolbar Button.\n            editor.ui.registry.addButton(uppercaseButtonName, {\n                icon: 'uppercaseIcon',\n                tooltip: uppercaseTitle,\n                onAction: () => changeCase(editor, 'uppercase'),\n            });\n        }\n\n        // Add the changecase Menu Item.\n        // This allows it to be added to a standard menu, or a context menu.\n        editor.ui.registry.addNestedMenuItem(changecaseMenuItemName, {\n            icon,\n            text: changecaseMenuItemNameTitle,\n            getSubmenuItems: () => [\n                {\n                    type: 'menuitem',\n                    text: lowercaseTitle,\n                    onAction: () => changeCase(editor, 'lowercase'),\n                },\n                {\n                    type: 'menuitem',\n                    text: uppercaseTitle,\n                    onAction: () => changeCase(editor, 'uppercase'),\n                }\n            ]\n        });\n    };\n};\n"],"names":["changeCase","editor","toCase","selectedText","selection","getContent","toUpperCase","setContent","toLowerCase","async","changecaseMenuItemNameTitle","uppercaseTitle","lowercaseTitle","buttonImage","uppercaseImage","lowercaseImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","lowercaseButtonName","tooltip","onAction","uppercaseButtonName","addNestedMenuItem","changecaseMenuItemName","text","getSubmenuItems","type"],"mappings":";;;;;;;;MAwCMA,WAAa,CAACC,OAAQC,cAGpBC,aAAeF,OAAOG,UAAUC,oBAE5BH,YACC,YACDC,aAAeA,aAAaG,cAC5BL,OAAOG,UAAUG,WAAWJ,wBAE3B,YACDA,aAAeA,aAAaK,cAC5BP,OAAOG,UAAUG,WAAWJ,kCAahBM,gBAEhBC,4BACAC,eACAC,eACAC,YACAC,eACAC,sBACMC,QAAQC,IAAI,EAClB,mBAAU,sBAAuBC,oBACjC,mBAAU,YAAaA,oBACvB,mBAAU,YAAaA,oBACvB,yBAAe,OAAQA,oBACvB,yBAAe,YAAaA,oBAC5B,yBAAe,YAAaA,4BAGxBjB,SAEJA,OAAOkB,GAAGC,SAASC,QAAQC,aAAMT,YAAYU,OAEzC,6BAAiBtB,UACjBA,OAAOkB,GAAGC,SAASC,QAAQ,gBAAiBN,eAAeQ,MAC3DtB,OAAOkB,GAAGC,SAASC,QAAQ,gBAAiBP,eAAeS,MAG3DtB,OAAOkB,GAAGC,SAASI,UAAUC,4BAAqB,CAC9CH,KAAM,gBACNI,QAASd,eACTe,SAAU,IAAM3B,WAAWC,OAAQ,eAIvCA,OAAOkB,GAAGC,SAASI,UAAUI,4BAAqB,CAC9CN,KAAM,gBACNI,QAASf,eACTgB,SAAU,IAAM3B,WAAWC,OAAQ,gBAM3CA,OAAOkB,GAAGC,SAASS,kBAAkBC,+BAAwB,CACzDR,KAAAA,aACAS,KAAMrB,4BACNsB,gBAAiB,IAAM,CACnB,CACIC,KAAM,WACNF,KAAMnB,eACNe,SAAU,IAAM3B,WAAWC,OAAQ,cAEvC,CACIgC,KAAM,WACNF,KAAMpB,eACNgB,SAAU,IAAM3B,WAAWC,OAAQ"}